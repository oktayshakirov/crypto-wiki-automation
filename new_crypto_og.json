{
  "name": "Crypto Wiki: New Crypto OG",
  "nodes": [
    {
      "parameters": {},
      "id": "3db27b68-c5ff-4ee7-b6b2-2b4066139027",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        192,
        -144
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "name",
              "value": "Vitalik Buterin"
            },
            {
              "name": "website",
              "value": "https://vitalik.ca/"
            }
          ]
        },
        "options": {}
      },
      "id": "e5d53575-5085-4596-aba5-17a2ed0a0d60",
      "name": "Set OG Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        400,
        -144
      ]
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "oktayshakirov",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "crypto-wiki-automation",
          "mode": "name"
        },
        "filePath": "content-database.json",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "id": "ea44ebd6-5fe1-4022-9d82-d5d196c5417b",
      "name": "Get content-database.json",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        592,
        -256
      ],
      "webhookId": "c26dd364-7931-4db8-999f-21d5562c6923",
      "credentials": {
        "githubApi": {
          "id": "PGPD26vSgTS2AeM8",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "oktayshakirov",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "crypto-wiki-automation",
          "mode": "name"
        },
        "filePath": "crypto_og_guidelines.md",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "id": "ff42ee60-9407-4694-87a9-7633405b8b44",
      "name": "Get Guidelines",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        592,
        -48
      ],
      "webhookId": "a88b1978-9617-4191-ad28-3bfe461bcae3",
      "credentials": {
        "githubApi": {
          "id": "PGPD26vSgTS2AeM8",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "mode": "wait"
      },
      "id": "4b17b2c3-88ba-46eb-86ba-2c05af0a519d",
      "name": "Merge DB + Guidelines",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        800,
        -144
      ]
    },
    {
      "parameters": {
        "functionCode": "function decodeFile(nodeName, parseJson=false) {\n  const node = $node[nodeName].json;\n  if (!node.content) throw new Error(`${nodeName} has no json.content`);\n  const buff = Buffer.from(node.content, 'base64');\n  const text = buff.toString('utf-8');\n  return parseJson ? JSON.parse(text) : text;\n}\n\nconst db = decodeFile(\"Get content-database.json\", true);\nconst guidelinesText = decodeFile(\"Get Guidelines\", false);\nconst { name, website } = $node[\"Set OG Data\"].json;\n\nfunction formatDbCompact(dbObj, category) {\n  return Object.entries(dbObj || {})\n    .map(([key, val]) => {\n      const fullSlug = `/${category}/${val.slug}`;\n      return [key, fullSlug, val.title].join('|');\n    })\n    .join('\\n');\n}\n\nconst compactOgs = formatDbCompact(db.crypto_ogs, 'crypto-ogs');\nconst compactPosts = formatDbCompact(db.posts, 'posts');\nconst compactExchanges = formatDbCompact(db.exchanges, 'exchanges');\nconst compactTools = formatDbCompact(db.tools, 'tools');\n\nreturn [{\n  json: {\n    db,\n    guidelinesText,\n    name,\n    website,\n    compactOgs,\n    compactPosts,\n    compactExchanges,\n    compactTools\n  }\n}];"
      },
      "id": "f1520097-3f39-4688-acb9-cc05c66849e5",
      "name": "Parse & Prepare Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        992,
        -144
      ]
    },
    {
      "parameters": {
        "resource": "chat",
        "chatModel": "gpt-5",
        "prompt": {
          "messages": [
            {
              "role": "system",
              "content": "You are an expert crypto historian writing detailed, balanced, and SEO-optimized biographies for Crypto Wiki. Follow all provided guidelines strictly."
            },
            {
              "content": "Crypto OG: {{$json.name}}  \nWebsite: {{$json.website}}  \n\nINTERNAL LINK DATABASES (format: key|slug|title):  \n\nCRYPTO_OGS:\n{{$json.compactOgs}}\n\nPOSTS:\n{{$json.compactPosts}}\n\nEXCHANGES:\n{{$json.compactExchanges}}\n\nTOOLS:\n{{$json.compactTools}}\n\n=== GUIDELINES ===  \n{{$json.guidelinesText}}\n\nIMPORTANT: After writing the biography, provide a JSON object with:\n1. social: verified social URLs (website, twitter, linkedin, wikipedia, etc.)\n2. description: 100â€“150 character summary specific to the person."
            }
          ]
        },
        "simplifyOutput": false,
        "options": {},
        "requestOptions": {}
      },
      "id": "bb6c55d7-a3d1-454b-9802-037e25adf613",
      "name": "OpenAI: Generate Body",
      "type": "n8n-nodes-base.openAi",
      "position": [
        1216,
        -144
      ],
      "typeVersion": 1.1,
      "credentials": {
        "openAiApi": {
          "id": "V3M27dVzBH2bYknk",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const meta = $node[\"Parse & Prepare Data\"].json;\nconst ai = $node[\"OpenAI: Generate Body\"].json;\n\nconst slug = meta.name.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');\nconst isoDate = new Date().toISOString().split('T')[0];\nconst order = meta.db.next_orders.crypto_ogs;\n\nlet socialLinks = { website: meta.website };\nlet description = '';\n\nconst aiContent = ai.choices?.[0]?.message?.content || ai.content || '';\nconst jsonMatch = aiContent.match(/\\{[\\s\\S]*\"social\"[\\s\\S]*\\}/);\nif (jsonMatch) {\n  const jsonString = jsonMatch[0];\n  try {\n    const parsed = JSON.parse(jsonString);\n    if (parsed.social) socialLinks = { ...socialLinks, ...parsed.social };\n    if (parsed.description) description = parsed.description;\n  } catch (e) {\n    console.log('JSON parsing error:', e.message);\n  }\n}\n\nconst socialSection = Object.entries(socialLinks)\n  .map(([k, v]) => `  ${k}: ${v}`)\n  .join('\\n');\n\nconst frontmatter = [\n  '---',\n  `title: \"${meta.name}\"`,\n  `image: \"/images/crypto-ogs/${slug}.png\"`,\n  `description: \"${description}\"`,\n  `date: ${isoDate}`,\n  `order: ${order}`,\n  `authors: [\"Crypto Wiki Team\"]`,\n  `social:`,\n  socialSection,\n  '---'\n].join('\\n');\n\nconst body = aiContent.replace(/\\n\\{[\\s\\S]*\\}\\s*$/, '').trim();\n\nreturn [{\n  json: {\n    mdx: `${frontmatter}\\n\\n${body}`,\n    slug,\n    name: meta.name,\n    website: meta.website,\n    isoDate,\n    order,\n    db: meta.db,\n    socialLinks\n  }\n}];"
      },
      "id": "e028f1d4-5ea8-44b6-a842-13bd596593fb",
      "name": "Build Frontmatter + MDX",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1408,
        -144
      ]
    },
    {
      "parameters": {
        "functionCode": "const data = $json;\nconst filePath = `${data.slug}.mdx`;\nconst commitMessage = `New Crypto OG: ${data.name}`;\nreturn [{ json: { ...data, filePath, commitMessage } }];"
      },
      "id": "f0b2e521-2e52-4694-96be-365100588fca",
      "name": "Prepare File Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1616,
        -144
      ]
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "value": "oktayshakirov",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "crypto-wiki-automation",
          "mode": "name"
        },
        "filePath": "=content/crypto-ogs/{{$json.filePath}}",
        "fileContent": "={{$json.mdx}}",
        "commitMessage": "={{$json.commitMessage}}"
      },
      "id": "5493c370-6ef0-49ca-88e2-4a9e0d96c0ca",
      "name": "Write New OG MDX",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        1808,
        -144
      ],
      "webhookId": "9375c184-2cdb-451c-bf7d-c5c6e535afac",
      "credentials": {
        "githubApi": {
          "id": "PGPD26vSgTS2AeM8",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const fileResult = $input.first().json;\nif (!fileResult || fileResult.error) throw new Error('File write failed');\n\nconst ogData = $node[\"Build Frontmatter + MDX\"].json;\nconst dbData = ogData.db;\n\nconst updatedDb = {\n  ...dbData,\n  crypto_ogs: { ...(dbData.crypto_ogs || {}) },\n  next_orders: { ...(dbData.next_orders || { crypto_ogs: 1 }) }\n};\n\nconst key = ogData.name.toLowerCase().replace(/\\s+/g, '.');\nif (updatedDb.crypto_ogs[key]) throw new Error(`OG '${ogData.name}' already exists`);\n\nupdatedDb.crypto_ogs[key] = { slug: ogData.slug, title: ogData.name };\nupdatedDb.next_orders.crypto_ogs = (updatedDb.next_orders.crypto_ogs || 0) + 1;\n\nreturn [{ json: { db: updatedDb, ogAdded: key, name: ogData.name } }];"
      },
      "id": "b3f41661-819b-4005-b817-a79425b50adc",
      "name": "Update Database",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2000,
        -144
      ]
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "value": "oktayshakirov",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "crypto-wiki-automation",
          "mode": "name"
        },
        "filePath": "content-database.json",
        "fileContent": "={{JSON.stringify($json.db, null, 2)}}",
        "commitMessage": "=Update crypto_ogs DB after adding {{$json.name || 'new OG'}}"
      },
      "id": "e948270a-fc6a-453e-b439-c6c5310338d7",
      "name": "Write Updated DB JSON",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        2208,
        -144
      ],
      "webhookId": "0b5db4dd-bb1c-4fa5-8714-d88162758079",
      "credentials": {
        "githubApi": {
          "id": "PGPD26vSgTS2AeM8",
          "name": "GitHub account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Set OG Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set OG Data": {
      "main": [
        [
          {
            "node": "Get content-database.json",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Guidelines",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get content-database.json": {
      "main": [
        [
          {
            "node": "Merge DB + Guidelines",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Guidelines": {
      "main": [
        [
          {
            "node": "Merge DB + Guidelines",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge DB + Guidelines": {
      "main": [
        [
          {
            "node": "Parse & Prepare Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse & Prepare Data": {
      "main": [
        [
          {
            "node": "OpenAI: Generate Body",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI: Generate Body": {
      "main": [
        [
          {
            "node": "Build Frontmatter + MDX",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Frontmatter + MDX": {
      "main": [
        [
          {
            "node": "Prepare File Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare File Data": {
      "main": [
        [
          {
            "node": "Write New OG MDX",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Write New OG MDX": {
      "main": [
        [
          {
            "node": "Update Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Database": {
      "main": [
        [
          {
            "node": "Write Updated DB JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "6517d8c2-e6cd-4375-9fe3-29fd0f2c0bfe",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "002b5e092f04f4d75aa57fd214532db5fa3d65fe608d265bda2ed541d575f595"
  },
  "id": "YdmVFUjlVzA2WYqV",
  "tags": []
}